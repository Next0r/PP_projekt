@model BedAndBreakfast.Models.AnnouncementSubtypeViewModel
@using BedAndBreakfast.Data;

@{
	ViewData["Title"] = "Subtype";
	string announcementType = (string)ViewData["announcementType"];
}

<h2>Subtype</h2>

@switch (announcementType)
{
	case "House":
		List<SelectListItem> houseSubtypes = ListedDbValues.CreateListOfItems<ListedDbValues.HouseSubtype>(null);
		List<SelectListItem> houseSharedParts = ListedDbValues.CreateListOfItems<ListedDbValues.HouseSharedPart>(null);
		<form asp-controller="Hosting" asp-action="SetAnnouncementSubtype">
			<div>
				<label asp-for="Subtype"></label>
				@Html.DropDownListFor(m => m.Subtype, houseSubtypes, "---")
				<span asp-validation-for="Subtype"></span>
			</div>
			<div>
				<label asp-for="SharedPart"></label>
				@Html.DropDownListFor(m => m.SharedPart, houseSharedParts, "---")
				<span asp-validation-for="SharedPart"></span>
			</div>
			<div>
				<input type="submit" value="Continue" />
			</div>
		</form>
		break;


	case "Entertainment":
		List<SelectListItem> entertainmentSubtypes = ListedDbValues.CreateListOfItems<ListedDbValues.EntertainmentSubtype>(null);
		<form asp-controller="Hosting" asp-action="SetAnnouncementSubtype">
			<div>
				<label asp-for="Subtype"></label>
				@Html.DropDownListFor(m => m.Subtype, entertainmentSubtypes, "---")
				<span asp-validation-for="Subtype"></span>
			</div>
			<div>
				<input type="submit" value="Continue" />
			</div>
		</form>
		break;


	case "Food":
		List<SelectListItem> foodSubtypes = ListedDbValues.CreateListOfItems<ListedDbValues.FoodSubtype>(null);
		<form asp-controller="Hosting" asp-action="SetAnnouncementSubtype">
			<div>
				<label asp-for="Subtype"></label>
				@Html.DropDownListFor(m => m.Subtype, foodSubtypes, "---")
				<span asp-validation-for="Subtype"></span>
			</div>
			<div>
				<input type="submit" value="Continue" />
			</div>
		</form>
		break;


	default:
		break;
}


